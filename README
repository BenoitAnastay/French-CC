A (bad) french locale/translation of CrossCode.

It's far from being complete, and let's not talk about its quality.

Feedback and testing are welcome.  Suggestions for better translations
are welcome, as are snarky remarks from grammar cops.

Installing:

To use this mod:
- Install it in a sub-directory in assets/mods
  (the name of the directory is not important)
- Install Localize-me[1] in assets/mods too.
- Either install CCLoader[2] or CCInjector[3], at your discretion.

[1] https://github.com/L-Sherry/Localize-me
[2] https://github.com/CCDirectLink/CCLoader
[3] https://github.com/CCDirectLink/CCInjector
    you also need the mod-validator plugin for CCInjector,
    if you haven't installed it already:
    https://github.com/ccinjector-plugins/mod-validator

Contributing:

To view/recreate translations packs in this mod, you can simply clone this
repository and use the provided makefile as follow:

make generate gamedir="/path/to/the/crosscode/assets/"

If this mod is already installed in a subdirectory of assets/mods, then
gamedir="..." is not necessary:

make generate

Will attempt to generate a big JSON file under translation/french_translation
that you can either edit with a text editor, or add more translations using
tools/jsontr.py (assuming you cloned this repository recursively with its
submodules, or else get it from https://github.com/L-Sherry/Localize-Me-Tools)

tools/jsontr.py --from-locale en_US --show-locales en_US de_DE \
		--pack-file=translation/french_translation \
		--gamedir=...  continue

You can then use 'make gamedir=...' (or just 'make') to update the files in
packs/ and commit them.

If you can't use the makefile for some reason, then read it, it's not
that complicated (erm).  It basically boils down to calling packfile.py
from Localize-Me-Tools.

A quick introduction on how to use `jsontr.py` is available here:
https://github.com/L-Sherry/Localize-Me-Tools/blob/master/doc/SoYouWannaTranslate.md

You can use config.json.template as a template for a config.json to use
with jsontr.py
